
import { CommandHandler, ICommandHandler } from '@nestjs/cqrs';
import { Result, Err, Ok } from 'oxide.ts';
import { Inject } from '@nestjs/common';

import { ExceptionBase, NotFoundException } from '@/libs/exceptions';

import { Delete{{properCase name}}Command } from '@/modules/{{dashCase name}}/commands/delete-{{dashCase name}}/delete-{{dashCase name}}.command'
import { {{constantCase name}}_REPOSITORY } from '@/modules/{{dashCase name}}/{{dashCase name}}.di-token';
import { {{properCase name}}RepositoryPort } from '@/modules/{{dashCase name}}/database/{{dashCase name}}.repository.port';

export type Delete{{properCase name}}ServiceResponse = Result<string, ExceptionBase>;

@CommandHandler(Delete{{properCase name}}Command)
export class Delete{{properCase name}}Service 
    implements ICommandHandler<
        Delete{{properCase name}}Command, 
        Delete{{properCase name}}ServiceResponse> {

    constructor(
        @Inject({{constantCase name}}_REPOSITORY)
        private readonly repository: {{properCase name}}RepositoryPort
    ) {}

    public async execute(command: Delete{{properCase name}}Command) {
        const result = await this.repository.findOneById(command.{{camelCase name}}ID);

        if (result.isNone()) {
            return Err(new NotFoundException('The {{lowerCase name}} could not be found.'));
        }

        const entity = result.unwrap();

        const deleteExpectation = entity.delete();

        if (deleteExpectation.isErr()) {
            return Err(deleteExpectation.unwrapErr());
        }

        await this.repository.transaction(async () => {
            await this.repository.update(entity);
        });

        return Ok(entity.id);
    }
}